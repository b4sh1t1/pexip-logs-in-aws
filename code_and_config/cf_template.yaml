AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to deploy IAM Policies, Roles, CloudWatchLogs log groups, Lambda Functions, Athena Tables... in order to perform wrangling of Pexip raw logs to a JSON format, export them to S3 and CloudWatchLogs and perform queries using tools like CloudWatch Insights or Athena"
Parameters:
  PexipLogsS3BucketName:
    Type: String
    Description: "S3 bucket name, where the Pexip Logs will be stored after wrangling"
  PexipLogsS3StorageClass:
    Type: String
    Default: "ONEZONE_IA"
    AllowedValues: ["STANDARD","REDUCED_REDUNDANCY","STANDARD_IA","ONEZONE_IA","INTELLIGENT_TIERING"]
    Description: "The S3 Storage Class used to store the Pexip Logs after wrangling."
  ProcessAuditLogs:
    Type: String
    Default: "True"
    AllowedValues: ["True", "False"]
    Description: "Do you want to process the Pexip Infinity Audit logs together with the Support logs or not?"
  ProcessWebServerLogs:
    Type: String
    Default: "True"
    AllowedValues: ["True", "False"]
    Description: "Do you also want to process the Pexip Infinity Apache Web Server logs or not?"
  ExportProcessedLogsToS3:
    Type: String
    Default: "True"
    AllowedValues: ["True", "False"]
    Description: "Do you also want to export the processed the Pexip Infinity logs to the specified S3 bucket in addition to CloudWatch logs?"
  RetentionDaysPexipRAWLogs:
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827,3653]
    Description: "The Retention period - in number of days - of the Pexip RAW logs into CloudWatch Logs log group"
  RetentionDaysLambdaFunctionsLogs:
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827,3653]
    Description: "The Retention period - in number of days - of the logs generated by the Lambda Functions into CloudWatch Logs"
Conditions:
  ProcessAuditLogsToo: !Equals [!Ref ProcessAuditLogs, "True"]
  ProcessWebServerLogsToo: !Equals [!Ref ProcessWebServerLogs, "True"]
  ExportProcessedLogsToS3Too: !Equals [!Ref ExportProcessedLogsToS3, "True"]

Resources:

##########################################################################
# IAM Roles and Policies for the EC2 Syslog server
##########################################################################

  RoleForEC2SyslogServer:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Role_for_EC2_Syslog_Server"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  InstanceProfileforSyslogServerRole:
    DependsOn:
      - RoleForEC2SyslogServer
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "Role_for_EC2_Syslog_Server"
      Path: "/"
      Roles:
        - !Ref RoleForEC2SyslogServer

##########################################################################
# IAM Roles and Policies the CloudWatch logs Wrangling and Export
##########################################################################

  RoleLambdaPexipLogsWrangling:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Role_Lambda_Pexip_Logs_Wrangling"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  RoleLambdaPexipLogsExport:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Role_Lambda_Pexip_Logs_Export"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  PolicyAllowExecutionOfPexipLogsExport:
    DependsOn:
      - RoleLambdaPexipLogsWrangling
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "Policy_Allow_Execution_of_Pexip_Logs_Export"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Pexip_Logs_Export"
      Roles:
        - !Ref RoleLambdaPexipLogsWrangling

  PolicyAllowPexipLogsWranglingLogging:
    DependsOn:
      - RoleLambdaPexipLogsWrangling
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "Policy_Allow_Pexip_Logs_Wrangling_Lambda_Logging_to_CloudWatch"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "logs:CreateLogGroup"
            Resource: "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pexip_Logs_Wrangling"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pexip_Logs_Wrangling:*:*"
      Roles:
        - !Ref RoleLambdaPexipLogsWrangling

  PolicyAllowPexipLogsExportLogging:
    DependsOn:
      - RoleLambdaPexipLogsExport
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "Policy_Allow_Pexip_Logs_Export_Lambda_Logging_to_CloudWatch"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "logs:CreateLogGroup"
            Resource: "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pexip_Logs_Export"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pexip_Logs_Export:*:*"
      Roles:
        - !Ref RoleLambdaPexipLogsExport

  PolicyAllowExportOfPexipLogsToS3:
    DependsOn:
      - RoleLambdaPexipLogsExport
    Type: "AWS::IAM::Policy"
    Condition: ExportProcessedLogsToS3Too
    Properties:
      PolicyName: "Policy_Allow_Pexip_Logs_Export_to_S3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${PexipLogsS3BucketName}/*"
      Roles:
        - !Ref RoleLambdaPexipLogsExport

  PolicyAllowExportOfPexipLogsToCloudWatch:
    DependsOn:
      - RoleLambdaPexipLogsExport
      - RoleForEC2SyslogServer
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "Policy_Allow_Pexip_Logs_Export_to_CloudWatch"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "logs:CreateLogGroup"
            Resource: "*"
          - Effect: Allow
            Action:
              - "logs:DescribeLogGroups"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:Pexip_Nodes_*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:Pexip_Nodes_*:*:*"
      Roles:
        - !Ref RoleLambdaPexipLogsExport
        - !Ref RoleForEC2SyslogServer

##########################################################################
# Lambda Functions
##########################################################################

  PexipLogsWrangling:
    DependsOn:
      - RoleLambdaPexipLogsWrangling
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Pexip_Logs_Wrangling"
      Runtime: "python3.7"
      Handler: "Pexip_Logs_Wrangling.lambda_handler"
      Code:
        S3Bucket: !Sub "${PexipLogsS3BucketName}"
        S3Key: "code/Pexip_Logs_Wrangling.zip"
      Description: "Parse the Pexip Audit & Support Syslogs sent to Cloudwatch and wrangle them into JSON"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DEBUGGING_LOG_LEVEL: "Detailed"
          EXPORT_TO_CLOUDWATCH_LOGS: "True"
          EXPORT_TO_S3: !Sub "${ExportProcessedLogsToS3}"
          LOG_EXPORT_FUNCTION: Pexip_Logs_Export
      Role: !GetAtt RoleLambdaPexipLogsWrangling.Arn

  PexipLogsExport:
    DependsOn:
      - RoleLambdaPexipLogsExport
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Pexip_Logs_Export"
      Runtime: "python3.7"
      Handler: "Pexip_Logs_Export.lambda_handler"
      Code:
        S3Bucket: !Sub "${PexipLogsS3BucketName}"
        S3Key: "code/Pexip_Logs_Export.zip"
      Description: "Export the JSON formatted logs into S3 and, or CloudWatch Logs"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DEBUGGING_LOG_LEVEL: "Detailed"
          CLOUDWATCHLOGS_LOG_GROUP_SUFFIX: _JSON
          S3_BUCKET_NAME: !Sub "${PexipLogsS3BucketName}"
          S3_STORAGE_CLASS: !Sub "${PexipLogsS3StorageClass}"
      Role: !GetAtt RoleLambdaPexipLogsExport.Arn

##########################################################################
# CloudWatch Logs:
# log groups, Subscription Filters and related Lambda permissions
##########################################################################

  CWLogGroupPexipNodesAuditLogsRAW:
    Type: "AWS::Logs::LogGroup"
    Condition: ProcessAuditLogsToo
    Properties: 
      LogGroupName: "Pexip_Nodes_Audit_Logs_RAW"
      RetentionInDays: !Sub ${RetentionDaysPexipRAWLogs}

  PexipNodesAuditLogsWranglingPermission:
    DependsOn:
      - CWLogGroupPexipNodesAuditLogsRAW
      - PexipLogsWrangling
    Type: AWS::Lambda::Permission
    Condition: ProcessAuditLogsToo
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt PexipLogsWrangling.Arn
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId

  CWLogGroupPexipNodesAuditLogsRAWStreamToLambda:
    DependsOn:
      - CWLogGroupPexipNodesAuditLogsRAW
      - PexipLogsWrangling
    Type: AWS::Logs::SubscriptionFilter
    Condition: ProcessAuditLogsToo
    Properties: 
      DestinationArn: !GetAtt PexipLogsWrangling.Arn
      FilterPattern: "[syslog_time, system, audit, system_fqdn, type, log_message]"
      LogGroupName: 
        !Ref CWLogGroupPexipNodesAuditLogsRAW

  CWLogGroupPexipNodesSupportLogsRAW:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "Pexip_Nodes_Support_Logs_RAW"
      RetentionInDays: !Sub ${RetentionDaysPexipRAWLogs}

  PexipNodesSupportLogsWranglingPermission:
    DependsOn:
      - CWLogGroupPexipNodesSupportLogsRAW
      - PexipLogsWrangling
    Type: AWS::Lambda::Permission
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt PexipLogsWrangling.Arn
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId

  CWLogGroupPexipNodesSupportLogsRAWStreamToLambda:
    DependsOn:
      - CWLogGroupPexipNodesSupportLogsRAW
      - PexipLogsWrangling
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt PexipLogsWrangling.Arn
      FilterPattern: "[syslog_time, system, originating_date, originating_time, level, name, log_message]"
      LogGroupName: 
        !Ref CWLogGroupPexipNodesSupportLogsRAW

  CWLogGroupPexipNodesWebServerLogsRAW:
    Type: "AWS::Logs::LogGroup"
    Condition: ProcessWebServerLogsToo
    Properties: 
      LogGroupName: "Pexip_Nodes_Web_Server_Logs_RAW"
      RetentionInDays: !Sub ${RetentionDaysPexipRAWLogs}

  PexipNodesWebServerLogsWranglingPermission:
    DependsOn:
      - CWLogGroupPexipNodesWebServerLogsRAW
      - PexipLogsWrangling
    Type: AWS::Lambda::Permission
    Condition: ProcessWebServerLogsToo
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt PexipLogsWrangling.Arn
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId

  CWLogGroupPexipNodesWebServerLogsRAWStreamToLambda:
    DependsOn:
      - CWLogGroupPexipNodesWebServerLogsRAW
      - PexipLogsWrangling
    Type: AWS::Logs::SubscriptionFilter
    Condition: ProcessWebServerLogsToo
    Properties: 
      DestinationArn: !GetAtt PexipLogsWrangling.Arn
      FilterPattern: "[syslog_time, system, apache, log_message]"
      LogGroupName: 
        !Ref CWLogGroupPexipNodesWebServerLogsRAW

  CWLogGroupLambdaPexipLogsWrangling:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/aws/lambda/Pexip_Logs_Wrangling"
      RetentionInDays: !Sub ${RetentionDaysLambdaFunctionsLogs}

  CWLogGroupLambdaPexipLogsExport:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/aws/lambda/Pexip_Logs_Export"
      RetentionInDays: !Sub ${RetentionDaysLambdaFunctionsLogs}
